# Copy these contents into the root directory of your Github project in a file
# named .travis.yml

# Use new container infrastructure to enable caching
sudo: false

# Choose a lightweight base image; we provide our own build tools.
language: c

# Caching so the next build will be fast too.
cache:
  directories:
  - $HOME/.ghc
  - $HOME/.cabal
  - $HOME/.stack

# The different configurations we want to test. We have BUILD=cabal which uses
# cabal-install, and BUILD=stack which uses Stack. More documentation on each
# of those below.
#
# We set the compiler values here to tell Travis to use a different
# cache file per set of arguments.
#
# If you need to have different apt packages for each combination in the
# matrix, you can use a line such as:
#     addons: {apt: {packages: [libfcgi-dev,libgmp-dev]}}
matrix:
  include:
  # We grab the appropriate GHC and cabal-install versions from hvr's PPA. See:
  # https://github.com/hvr/multi-ghc-travis
    - env: BUILD=cabal STACK_YAML=stack.yaml CABALVER=1.24 GHCVER=8.0.2
      compiler: ": #GHC 8.0.2"
      addons: {apt: {packages: [cabal-install-1.24,ghc-8.0.2], sources: [hvr-ghc]}}

    - env: BUILD=stack GHCVER=8.0.2 STACK_YAML=stack.yaml
      compiler: ": #stack 8.0.2"
      addons: {apt: {packages: [ghc-8.0.2], sources: [hvr-ghc]}}

    - env: BUILD=stack GHCVER=8.0.2 STACK_YAML=stack.yaml
      compiler: ": #stack 8.0.2 osx"
      os: osx

    - env: BUILD=style GHCVER=8.0.2 STACK_YAML=stack.yaml
      compiler: ": #stack 8.0.2"
      addons: {apt: {packages: [ghc-8.0.2], sources: [hvr-ghc]}}

  allow_failures:
    - env: BUILD=stack STACK_YAML=stack-7.10.yaml
      compiler: ": #stack 7.10.3 osx"
      os: osx

    - env: BUILD=stack GHCVER=8.0.2 STACK_YAML=stack.yaml
      compiler: ": #stack 8.0.2 osx"
      os: osx

before_install:
  # Using compiler above sets CC to an invalid value, so unset it
  - unset CC

  # We want to always allow newer versions of packages when building on GHC HEAD
  - CABALARGS=""
  - if [ "x$GHCVER" = "xhead" ]; then CABALARGS=--allow-newer; fi

  # Download and unpack the stack executable
  - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$HOME/.local/bin:$PATH
  - mkdir -p ~/.local/bin
  - |
    if [ `uname` = "Darwin" ]
    then
      curl --insecure -L https://www.stackage.org/stack/osx-x86_64 | tar xz --strip-components=1 --include '*/stack' -C ~/.local/bin
    else
      curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
    fi

install:
  - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
  - if [ -f configure.ac ]; then autoreconf -i; fi
  - |
    case "$BUILD" in
      stack)
        stack --no-terminal --install-ghc $ARGS test --only-dependencies
        ;;
      style)
        stack --no-terminal --install-ghc $ARGS test --only-dependencies
        stack install stylish-haskell hlint
        ;;
      cabal)
        cabal --version
        travis_retry cabal update
        cabal install --only-dependencies --enable-tests --enable-benchmarks --force-reinstalls --ghc-options=-O0 --reorder-goals --max-backjumps=-1 $CABALARGS
        ;;
    esac

script:
  - |
    case "$BUILD" in
      style)
        find . -name '*.hs' -exec stack exec stylish-haskell -- -i {} \;
        git status
        git status | grep "nothing to commit"
        # hlint should return nothing for src dir
        stack exec hlint -- lint src
        # hlint should return nothing for app dir
        stack exec hlint -- lint app
        # hlint should return nothing for test dir
        stack exec hlint -- lint test
        # documentation needs to build
        ;;
      stack)
        stack --no-terminal $ARGS test --haddock --no-haddock-deps
        ;;
      cabal)
        cabal configure --enable-tests --enable-coverage --enable-benchmarks -v2 --ghc-options="-O0 -Werror"
        cabal build
        cabal check || [ "$CABALVER" == "1.16" ]
        cabal test
        cabal sdist
        cabal copy
        cabal install hpc-coveralls
        ~/.cabal/bin/hpc-coveralls ogma-test --exclude-dir test/
        SRC_TGZ=$(cabal info . | awk '{print $2;exit}').tar.gz && \
          (cd dist && cabal install --force-reinstalls "$SRC_TGZ")
        ;;
    esac
